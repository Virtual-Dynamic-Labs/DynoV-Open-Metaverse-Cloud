// Package log provides context-aware and structured logging capabilities.
package log

import (
	"context"
	"fmt"
	"github.com/natefinch/lumberjack"
	"go.uber.org/zap"
	"go.uber.org/zap/zapcore"
	"go.uber.org/zap/zaptest/observer"
	"net"
	"net/http"
	"net/http/httputil"
	"os"
	"runtime/debug"
	"strings"

	"github.com/gin-gonic/gin"
	"github.com/google/uuid"
)

// Logger is a logger that supports log levels, context and structured logging.
type Logger interface {
	// With returns a logger based off the root logger and decorates it with the given context and arguments.
	With(ctx *gin.Context, args ...interface{}) Logger

	// Info uses fmt.Sprint to construct and log a message at INFO level
	Info(args ...interface{})
	// Error uses fmt.Sprint to construct and log a message at ERROR level
	Error(args ...interface{})

	// Infof uses fmt.Sprintf to construct and log a message at INFO level
	Infof(format string, args ...interface{})
	// Errorf uses fmt.Sprintf to construct and log a message at ERROR level
	Errorf(format string, args ...interface{})
}

type logger struct {
	*zap.SugaredLogger
}

type contextKey int

const (
	requestIDKey contextKey = iota
	correlationIDKey
)

const (
	OutputFileRegex = "./log/%s.log"
)

// New creates a new logger using the default configuration.
func New(service string) Logger {
	l := NewMultiWriteLogger(service)
	return NewWithZap(l)
}

func NewMultiWriteLogger(service string) *zap.Logger {
	lumberJackLogger := &lumberjack.Logger{
		Filename:   fmt.Sprintf(OutputFileRegex, service),
		MaxSize:    1,
		MaxBackups: 3,
		MaxAge:     1,
		Compress:   true,
	}
	syncer := zap.CombineWriteSyncers(os.Stdout, zapcore.AddSync(lumberJackLogger))

	core := zapcore.NewCore(
		zapcore.NewJSONEncoder(zap.NewProductionEncoderConfig()),
		syncer,
		zap.DebugLevel,
	)
	return zap.New(core)
}

// NewWithZap creates a new logger using the preconfigured zap logger.
func NewWithZap(l *zap.Logger) Logger {
	return &logger{l.Sugar()}
}

// NewForTest returns a new logger and the corresponding observed logs which can be used in unit tests to verify log entries.
func NewForTest() (Logger, *observer.ObservedLogs) {
	core, recorded := observer.New(zapcore.InfoLevel)
	return NewWithZap(zap.New(core)), recorded
}

// Default returns a logger based off the root logger and decorates it with the given context and arguments.
//
// If the context contains request ID and/or correlation ID information (recorded via WithRequestID()
// and WithCorrelationID()), they will be added to every log message generated by the new logger.
//
// The arguments should be specified as a sequence of name, value pairs with names being strings.
// The arguments will also be added to every log message generated by the logger.
func (l *logger) Default(ctx context.Context, args ...interface{}) Logger {
	if ctx != nil {
		if id, ok := ctx.Value(requestIDKey).(string); ok {
			args = append(args, zap.String("request_id", id))
		}
		if id, ok := ctx.Value(correlationIDKey).(string); ok {
			args = append(args, zap.String("correlation_id", id))
		}
	}
	if len(args) > 0 {
		nl := &logger{l.SugaredLogger.With(args...)}
		return nl
	}
	return l
}

func (l *logger) With(ctx *gin.Context, args ...interface{}) Logger {
	if ctx != nil {
		if id, ok := ctx.Value("X-Request-ID").(string); ok {
			args = append(args, zap.String("request_id", id))
		}
		if id, ok := ctx.Value("X-Correlation-ID").(string); ok {
			args = append(args, zap.String("correlation_id", id))
		}
		args = append(args, zap.String("url", ctx.Request.URL.Path))
		args = append(args, zap.String("method", ctx.Request.Method))
		args = append(args, zap.Int("status", ctx.Writer.Status()))
		args = append(args, zap.String("client-ip", ctx.ClientIP()))
	}
	if len(args) > 0 {
		return &logger{l.SugaredLogger.With(args...)}
	}
	return l
}

// WithRequest returns a context which knows the request ID and correlation ID in the given request.
func WithRequest(ctx context.Context, req *http.Request) context.Context {
	id := getRequestID(req)
	if id == "" {
		id = uuid.New().String()
	}
	ctx = context.WithValue(ctx, requestIDKey, id)
	if id := getCorrelationID(req); id != "" {
		ctx = context.WithValue(ctx, correlationIDKey, id)
	}
	return ctx
}

// UpdateContext updates a context which knows the request ID and correlation ID in the given request.
func UpdateContext(ctx *gin.Context) {
	id := getRequestID(ctx.Request)
	if id == "" {
		id = uuid.New().String()
	}
	ctx.Set("X-Request-ID", id)
	if id := getCorrelationID(ctx.Request); id != "" {
		ctx.Set("X-Correlation-ID", id)
	}
}

// getCorrelationID extracts the correlation ID from the HTTP request
func getCorrelationID(req *http.Request) string {
	return req.Header.Get("X-Correlation-ID")
}

// getRequestID extracts the correlation ID from the HTTP request
func getRequestID(req *http.Request) string {
	return req.Header.Get("X-Request-ID")
}

func getUserID(req *http.Request) string {
	return req.Header.Get("UserID")
}

func getUsername(req *http.Request) string {
	return req.Header.Get("Username")
}

// GinLogger receives the default log of the gin framework
func GinLogger(logger Logger) gin.HandlerFunc {
	return func(c *gin.Context) {
		UpdateContext(c)
		c.Next()

		userID := getUserID(c.Request)
		username := getUsername(c.Request)
		if getUserID(c.Request) != "" && getUsername(c.Request) != "" {
			logger.With(c).Infof("%s:%s", userID, username)
		} else {
			logger.With(c).Info("")
		}
	}
}

// GinRecovery recovers panic log
func GinRecovery(logger Logger, stack bool) gin.HandlerFunc {
	return func(c *gin.Context) {
		defer func() {
			if err := recover(); err != nil {
				// Check for a broken connection, as it is not really a
				// condition that warrants a panic stack trace.
				var brokenPipe bool
				if ne, ok := err.(*net.OpError); ok {
					if se, ok := ne.Err.(*os.SyscallError); ok {
						if strings.Contains(strings.ToLower(se.Error()), "broken pipe") || strings.Contains(strings.ToLower(se.Error()), "connection reset by peer") {
							brokenPipe = true
						}
					}
				}

				httpRequest, _ := httputil.DumpRequest(c.Request, false)
				if brokenPipe {
					logger.Error(c.Request.URL.Path,
						zap.Any("error", err),
						zap.String("request", string(httpRequest)),
					)
					// If the connection is dead, we can't write a status to it.
					c.Error(err.(error)) // nolint: errcheck
					c.Abort()
					return
				}

				if stack {
					logger.Error("[Recovery from panic]",
						zap.Any("error", err),
						zap.String("request", string(httpRequest)),
						zap.String("stack", string(debug.Stack())),
					)
				} else {
					logger.Error("[Recovery from panic]",
						zap.Any("error", err),
						zap.String("request", string(httpRequest)),
					)
				}
				c.AbortWithStatus(http.StatusInternalServerError)
			}
		}()
		c.Next()
	}
}
